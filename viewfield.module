<?php

/**
 * @file
 * Defines an entity reference field type to display a view.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function viewfield_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.viewfield':
      $text = file_get_contents(dirname(__FILE__) . "/README.md");
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        $header = '<p><strong>Want to see this page with proper formatting? Install the <a href="https://www.drupal.org/project/markdown">markdown</a> module.</strong></p>';
        return '<pre>' . $header . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()
          ->get('markdown.settings')
          ->getRawData();
        $config = array('settings' => $settings);
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function viewfield_theme() {
  return array(
    'viewfield_item' => array(
      'render element' => 'element',
//      'variables' => array(
//        'title' => NULL,
//        'content' => NULL,
//        'attributes' => array(),
//        'title_attributes' => array(),
//        'title_prefix' => NULL,
//        'title_suffix' => NULL,
//        'delta' => NULL,
//      ),
    ),
  );
}

/**
 * Prepares variables for viewfield item templates.
 *
 * Default template: viewfield-item.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An element to display in view mode.
 */
function template_preprocess_viewfield_item(&$variables) {
  $element = $variables['element'];
  $variables['title'] = isset($element['#title']) ? $element['#title'] : NULL;
  $variables['content'] = isset($element['#content']) ? $element['#content'] : NULL;
  $variables['delta'] = $element['#delta'];
  $variables['entity'] = $element['#entity'];
  $variables['view_mode'] = $element['#view_mode'];

  $variables['attributes'] = new Attribute($variables['attributes']);
  $classes = array('viewfield-item');
  if (isset($variables['delta'])) {
    $classes[] = 'viewfield-item-' . $variables['delta'];
  }
  $variables['attributes']->addClass($classes);
  $variables['title_attributes'] = new Attribute($variables['title_attributes']);
  $variables['title_attributes']->addClass(array('viewfield-title'));
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function viewfield_theme_suggestions_viewfield_item(array $variables) {
  $suggestions = array();
  $entity = $variables['element']['#entity'];
  $sanitized_view_mode = strtr($variables['element']['#view_mode'], '.', '_');

  $suggestions[] = 'viewfield_item__' . $sanitized_view_mode;
  $suggestions[] = 'viewfield_item__' . $entity->bundle();
  $suggestions[] = 'viewfield_item__' . $entity->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}
