<?php

/**
 * @file
 * Defines a field type to display a view.
 */

/**
 * Implements hook_field_info().
 */
function viewfield_field_info() {
  return array(
    'viewfield' => array(
      // Should be "View", but that would translate into "view" (show) for many
      // languages due to missing string translation contexts.
      'label' => t('Views'),
      'description' => t('Displays a selected view in a node.'),
      'settings' => array('allowed_views' => array()),
      'instance_settings' => array('force_default' => FALSE),
      'default_widget' => 'viewfield_select',
      'default_formatter' => 'viewfield_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function viewfield_field_settings_form($field, $instance, $has_data) {
  $form['allowed_views'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed values'),
    '#options' => drupal_map_assoc(array_keys(views_get_enabled_views())),
    '#default_value' => isset($field['settings']['allowed_views']) && is_array($field['settings']['allowed_views']) ? $field['settings']['allowed_views'] : array(),
    '#description' => t('Only selected views will be available for content authors. Leave empty to allow all.'),
  );
  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function viewfield_field_instance_settings_form($field, $instance) {
  $form['#field_name'] = $field['field_name'];
  $form['force_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always use default value'),
    '#default_value' => $instance['settings']['force_default'],
    '#description' => t('Hides this field in forms and forces the default value defined below.'),
  );
  $form['#element_validate'] = array('viewfield_field_instance_settings_form_validate');
  return $form;
}

/**
 * Implements #element_validate for viewfield_field_instance_settings_form().
 */
function viewfield_field_instance_settings_form_validate($element, &$form_state) {
  $field = $form_state['values']['field'];
  $widget_values = $form_state['values'][$element['#field_name']][LANGUAGE_NONE];
  if ($element['force_default']['#value']) {
    if ($field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
      form_error($element['force_default'], t('%title does not support multiple field values.', array(
        '%title' => $element['force_default']['#title'],
      )));
    }
    if (empty($widget_values[0]['vname'])) {
      form_error($element['force_default'], t('%title requires a default value.', array(
        '%title' => $element['force_default']['#title'],
      )));
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function viewfield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (empty($item['vname'])) {
      unset($items[$delta]);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function viewfield_field_is_empty($item, $field) {
  return empty($item['vname']);
}

/**
 * Implements hook_field_prepare_view().
 *
 * Replace field values with instance defaults when force_default is set.
 */
function viewfield_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $entity_id => &$instance_items) {
    if ($instances[$entity_id]['settings']['force_default']) {
      $instance_items = $instances[$entity_id]['default_value'];
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function viewfield_field_formatter_info() {
  return array(
    'viewfield_default' => array(
      'label' => t('Default'),
      'field types' => array('viewfield')
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function viewfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'viewfield_default':
      foreach ($items as $delta => $item) {
        $elements[$delta] = array(
          '#markup' => theme('viewfield_formatter_default', array(
            'item' => $item,
            'entity_type' => $entity_type,
            'entity' => $entity,
          )),
        );
      }
      break;
  }
  return $elements;
}

/**
 * Implements hook_field_widget_info().
 */
function viewfield_field_widget_info() {
  return array(
    'viewfield_select' => array(
      'label' => 'Select List',
      'field types' => array('viewfield'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function viewfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Administrators need to be able to re-configure the default value on the
  // field edit form if 'force_default' is enabled.
  // @todo Core: Provide a solid identifier in field_ui_default_value_widget().
  $is_field_settings_form = FALSE;
  if (isset($form['#type']) && $form['#type'] == 'fieldset') {
    $is_field_settings_form = TRUE;
    $instance['settings']['force_default'] = FALSE;
  }

  // Display the form to let the user pick a view.
  $options = _viewfield_potential_references($field, $instance);
  $element['vname'] = array(
    '#type' => 'select',
    '#title' => $element['#title'],
    '#options' => $options,
    '#required' => $element['#required'],
    '#empty_value' => 0,
    '#default_value' => isset($items[$delta]['vname']) ? $items[$delta]['vname'] : NULL,
    '#access' => !$instance['settings']['force_default'],
    '#description' => $element['#description'],
  );
  $element['vargs'] = array(
    '#type' => 'textfield',
    '#title' => t('Arguments'),
    '#default_value' => isset($items[$delta]['vargs']) ? $items[$delta]['vargs'] : NULL,
    '#access' => !$instance['settings']['force_default'],
    '#description' => t('A comma separated list of arguments to pass to the selected view. Wrap arguments containing commas in double quotes. Replace double quotes in arguments with two double quotes.'),
  );

  // Provide token help.
  if (module_exists('token')) {
    $element['vargs']['#description'] .=
      '<br />' . t('Available tokens: any token from the placeholder token list.')
      . '<br />' . t('Note: Using placeholder tokens in combination with the %fields row style may negatively affect site performance.', array('%fields' => t('Fields')));
    // Only show token help for first value or in field settings form.
    if ($element['#delta'] === 0 && !$instance['settings']['force_default']) {
      $element['token_help'] = array(
        '#type' => 'fieldset',
        '#title' => t('Placeholder tokens'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $element['token_help']['tokens'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array($element['#entity_type']),
        '#global_types' => TRUE,
      );
    }
  }
  else {
    $entity_info = entity_get_info($element['#entity_type']);
    $entity_id_token = '[' . $element['#entity_type'] . ':' . $entity_info['entity keys']['id'] . ']';
    $element['vargs']['#description'] .=
    '<br />' . t('You may use %entity-id-token for the id of the current entity.', array('%entity-id-token' => $entity_id_token))
    . '<br />' . t('Enable the %token module to get a complete listing of replacement tokens.', array('%token' => t('Token')));
  }

  // @todo Core: Fix bogus white-space: nowrap.
  // @see http://drupal.org/node/1230336
  $element['#attached']['css'] = array(
    drupal_get_path('module', 'viewfield') . '/theme/viewfield.css' => array(
      'weight' => 1,
    ),
  );

  return $element;
}

/**
 * Returns a select options list of views displays of enabled and allowed views.
 */
function _viewfield_potential_references($field, $instance) {
  // Retrieve all currently available views.
  $views = views_get_enabled_views();
  // Limit to allowed values, if any.
  if (isset($field['settings']['allowed_views']) && is_array($field['settings']['allowed_views'])) {
    // Only intersect if at least one view has been enabled; otherwise, we would
    // end up with empty $views.
    if ($allowed = array_filter($field['settings']['allowed_views'])) {
      $views = array_intersect_key($views, $allowed);
    }
  }
  $options = array();
  foreach ($views as $view_name => $view) {
    foreach ($view->display as $display) {
      $options[$view->name . '|' . $display->id] = $view->name . ' - ' . $display->display_title;
    }
  }
  return $options;
}

/**
 * Implements hook_theme().
 */
function viewfield_theme() {
  return array(
    'viewfield_formatter_default' => array(
      'variables' => array(
        'item' => NULL,
        'entity_type' => NULL,
        'entity' => NULL,
      ),
      'file' => 'theme/viewfield.theme.inc',
    ),
  );
}

/**
 * Implements hook_content_migrate_instance_alter().
 */
function viewfield_content_migrate_instance_alter(&$instance_value, $field_value) {
  switch ($field_value['type']) {
    case 'viewfield':
      // Change formatter names to be prefixed with 'viewfield_'.
      foreach ($instance_value['display'] as $context => $settings) {
        if (strpos('viewfield_', $settings['type']) !== 0) {
          $instance_value['display'][$context]['type'] = 'viewfield_' . $settings['type'];
        }
      }
      // Migrate legacy tokens in CCK fields to core tokens in D7 fields.
      if (isset($instance_value['default_value'])) {
        foreach ($instance_value['default_value'] as $key => $default) {
          if (!empty($default['vargs'])) {
            $instance_value['default_value'][$key]['vargs'] = _viewfield_migrate_legacy_tokens($default['vargs']);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_content_migrate_data_record_alter().
 */
function viewfield_content_migrate_data_record_alter(&$record, $field) {
  switch ($field['type']) {
    case 'viewfield':
      // Migrate legacy tokens in CCK fields to core tokens in D7 fields.
      $vargs_field_name = $field['field_name'] . '_vargs';
      if (!empty($record[$vargs_field_name])) {
        $record[$vargs_field_name] = _viewfield_migrate_legacy_tokens($record[$vargs_field_name]);
      }
      break;
  }
}

/**
 * Substitute core tokens for legacy tokens (%nid, %author, %viewer) in text.
 */
function _viewfield_migrate_legacy_tokens($text) {
  return strtr($text, array(
    '%nid' => '[node:nid]',
    '%author' => '[node:author]',
    '%viewer' => '[current-user:uid]',
  ));
}
